#!/usr/bin/env ruby
require 'rubygems'
require 'thor'
require 'yaesu'
require 'msgpack'
require 'terminal-table'


module Yaesu
    class Cli < Thor
        desc "log", "Last 10 transmissions"
        def log(on)
            items = Ost[on].items.first(10)
            if items.count > 0
                puts ""
                puts "#{Ost[on].size} transmissions on #{on}\n"
                puts ""
                rows = []
                columns = ['UID','Event','Data']
                items.reverse.each do |item|
                    datum = OpenStruct.new(MessagePack.unpack(item))
                    rows << [datum.uid.split("-").first,datum.event,datum.data]
                end
                table = Terminal::Table.new :headings => columns, :rows => rows
                puts table
                puts ""
            end
        end

        desc "channels", "summary of channels"
        def channels
            puts ""
            rows = []
            columns = ['Name','Total']
            Ost.redis.call("KEYS","*ost*").each do |key|
                rows << [key.gsub("ost:",""),Ost[key.gsub("ost:","")].size]
            end 
            
            table = Terminal::Table.new :headings => columns, :rows => rows
            puts table
            puts ""
        end

        desc "transmit ON EVENT DATA", "Transmit ON EVENT DATA"
        def transmit(on,event,data)
            Yaesu.transmit on: on, event: event, data: data
        end
        desc "reset CHANNEL", "reset CHANNEL"
        def reset(channel)
            Ost[channel].redis.call("DEL",Ost[channel].key)
        end
    end
end

Yaesu::Cli.start(ARGV)